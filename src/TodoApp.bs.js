// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function str(prim) {
  return prim;
}

function length(list) {
  if (list) {
    return 1 + length(list[1]) | 0;
  } else {
    return 0;
  }
}

function renderFooter(numItems) {
  if (numItems !== 1) {
    return " items";
  } else {
    return " item";
  }
}

function map(f, l) {
  if (l) {
    return /* :: */[
            Curry._1(f, l[0]),
            map(f, l[1])
          ];
  } else {
    return /* [] */0;
  }
}

var component = ReasonReact.statelessComponent("TodoItem");

function make(item, onToggle, onDelete, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", {
                  className: "item"
                }, React.createElement("span", {
                      onClick: (function () {
                          return Curry._1(onToggle, /* () */0);
                        })
                    }, React.createElement("input", {
                          checked: Js_boolean.to_js_boolean(item[/* completed */2]),
                          type: "checkbox"
                        }), item[/* title */1]), React.createElement("button", {
                      onClick: (function () {
                          return Curry._1(onDelete, /* () */0);
                        })
                    }, "Delete"));
    });
  return newrecord;
}

var TodoItem = /* module */[
  /* component */component,
  /* make */make
];

function valueFromEvent(evt) {
  return evt.target.value;
}

var component$1 = ReasonReact.reducerComponent("Input");

function make$1(onSubmit, _) {
  var newrecord = component$1.slice();
  newrecord[/* render */9] = (function (param) {
      var text = param[/* state */2];
      var reduce = param[/* reduce */1];
      return React.createElement("input", {
                  placeholder: "Write something to do",
                  type: "text",
                  value: text,
                  onKeyDown: (function (evt) {
                      if (evt.key === "Enter") {
                        Curry._1(onSubmit, text);
                        return Curry._2(reduce, (function () {
                                      return "";
                                    }), /* () */0);
                      } else {
                        return 0;
                      }
                    }),
                  onChange: Curry._1(reduce, (function (evt) {
                          return evt.target.value;
                        }))
                });
    });
  newrecord[/* initialState */10] = (function () {
      return "";
    });
  newrecord[/* reducer */12] = (function (newText, _) {
      return /* Update */Block.__(0, [newText]);
    });
  return newrecord;
}

var Input = /* module */[
  /* component */component$1,
  /* make */make$1
];

var component$2 = ReasonReact.reducerComponent("TodoApp");

var lastId = [0];

function newItem(text) {
  lastId[0] = lastId[0] + 1 | 0;
  return /* record */[
          /* id */lastId[0],
          /* title */text,
          /* completed : false */0
        ];
}

function make$2() {
  var newrecord = component$2.slice();
  newrecord[/* render */9] = (function (param) {
      var items = param[/* state */2][/* items */0];
      var reduce = param[/* reduce */1];
      var numItems = length(items);
      return React.createElement("div", {
                  className: "app"
                }, React.createElement("div", {
                      className: "title"
                    }, "What to do", ReasonReact.element(/* None */0, /* None */0, make$1(Curry._1(reduce, (function (text) {
                                    return /* AddItem */Block.__(0, [text]);
                                  })), /* array */[]))), React.createElement("div", {
                      className: "items"
                    }, $$Array.of_list(map((function (item) {
                                return ReasonReact.element(/* Some */[Pervasives.string_of_int(item[/* id */0])], /* None */0, make(item, Curry._1(reduce, (function () {
                                                      return /* ToggleItem */Block.__(1, [item[/* id */0]]);
                                                    })), Curry._1(reduce, (function () {
                                                      return /* DeleteItem */Block.__(2, [item[/* id */0]]);
                                                    })), /* array */[]));
                              }), items))), React.createElement("div", {
                      className: "footer"
                    }, Pervasives.string_of_int(numItems) + renderFooter(numItems)));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* items : :: */[
                /* record */[
                  /* id */0,
                  /* title */"Write some things to do",
                  /* completed : false */0
                ],
                /* [] */0
              ]];
    });
  newrecord[/* reducer */12] = (function (action, param) {
      var items = param[/* items */0];
      switch (action.tag | 0) {
        case 0 : 
            return /* Update */Block.__(0, [/* record */[/* items : :: */[
                          newItem(action[0]),
                          items
                        ]]]);
        case 1 : 
            var id = action[0];
            var items$1 = map((function (item) {
                    var match = +(item[/* id */0] === id);
                    if (match !== 0) {
                      return /* record */[
                              /* id */item[/* id */0],
                              /* title */item[/* title */1],
                              /* completed */1 - item[/* completed */2]
                            ];
                    } else {
                      return item;
                    }
                  }), items);
            return /* Update */Block.__(0, [/* record */[/* items */items$1]]);
        case 2 : 
            var id$1 = action[0];
            var items$2 = List.filter((function (x) {
                      return +(x[/* id */0] !== id$1);
                    }))(items);
            return /* Update */Block.__(0, [/* record */[/* items */items$2]]);
        
      }
    });
  return newrecord;
}

exports.str = str;
exports.length = length;
exports.renderFooter = renderFooter;
exports.map = map;
exports.TodoItem = TodoItem;
exports.valueFromEvent = valueFromEvent;
exports.Input = Input;
exports.component = component$2;
exports.lastId = lastId;
exports.newItem = newItem;
exports.make = make$2;
/* component Not a pure module */
